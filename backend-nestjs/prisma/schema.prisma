generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CategoryProduct {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  image       String @db.LongText

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  products Product[]
}

model ProductDiscount {
  id                           String  @id @default(uuid())
  product_discount_name        String  @db.VarChar(255)
  product_discount_description String  @db.VarChar(255)
  product_discount_percent     Int
  product_discount_active      Boolean

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  products Product[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Product {
  id                        String @id @default(uuid())
  product_sku               String @db.VarChar(255)
  product_name              String @db.VarChar(255)
  product_description       String @db.VarChar(255)
  product_short_description String @db.VarChar(255)
  product_price_original    String @db.VarChar(255)
  product_price_discount    String @db.VarChar(255)
  product_quantity          String @db.VarChar(255)
  product_weight            String @db.VarChar(255)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  CategoryProduct   CategoryProduct? @relation(fields: [categoryProductId], references: [id])
  categoryProductId Int?

  ProductDiscount   ProductDiscount? @relation(fields: [productDiscountId], references: [id])
  productDiscountId String?

  productGalleries ProductGalleries[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model ProductGalleries {
  id                         Int      @id @default(autoincrement())
  product_galeries_image     String   @db.LongText
  product_galeries_thumbnail Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product   Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId String?
}

model User {
  id String @unique @default(uuid())

  email          String @unique
  hashedPassword String

  createdAt DateTime  @default(now())
  updateAt  DateTime? @updatedAt()

  UserRole   UserRole? @relation(fields: [userRoleId], references: [id])
  userRoleId Int?

  userprofile Userprofile?
  useraddress Useraddress[]

  products         Product[]
  productDiscounts ProductDiscount[]
}

model UserRole {
  id Int @id @default(autoincrement())

  role_name        String @unique
  role_description String

  createdAt DateTime  @default(now())
  updateAt  DateTime? @updatedAt()

  users User[]
}

model Useraddress {
  id String @id @default(uuid())

  full_name     String? @db.VarChar(255)
  number_phone  String? @db.VarChar(255)
  province      String? @db.VarChar(255)
  city          String? @db.VarChar(255)
  postal_code   String? @db.VarChar(255)
  address_line  String? @db.VarChar(255)
  houseOroffice String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Userprofile {
  id        String  @id @default(uuid())
  firstname String? @db.VarChar(255)
  lastname  String? @db.VarChar(255)
  gender    String? @db.VarChar(255)
  birthday  String? @db.VarChar(255)
  telephone String? @db.VarChar(255)
  image     String? @db.VarChar(255)

  updateAt DateTime @updatedAt()

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model mastercity {
  id          Int            @id @default(autoincrement())
  province_id Int
  province    masterprovince @relation(fields: [province_id], references: [id])

  type        String
  city_name   String
  postal_code String   @db.VarChar(10)
  createdAt   DateTime @default(now())
  updateAt    DateTime
}

model masterprovince {
  id        Int          @id @default(autoincrement())
  province  String
  createdAt DateTime     @default(now())
  updateAt  DateTime
  cities    mastercity[]
}

model Carousel {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  image     String    @db.VarChar(255)
  isActive  String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updateAt  DateTime? @updatedAt()
}
